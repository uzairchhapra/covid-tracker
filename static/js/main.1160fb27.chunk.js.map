{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid.jpg","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","modifiedUrl","axios","get","alert","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","fetchCountryData","stateData","state","provinceState","sort","b","slice","Chart","countryData","useState","setDailyData","useEffect","getDailyData","lineChart","length","height","labels","datasets","label","borderColor","backgroundColor","fill","options","scales","xAxes","stacked","ticks","min","maxTicksLimit","yAxes","beginAtZero","callback","index","Intl","NumberFormat","format","top5","statesBarChart","legend","boxWidth","barChart","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","setData","getData","setCountry","setCountryData","src","coronaImage","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1160fb27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport styles from './Cards.module.css';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    console.log(confirmed);\n    if (!confirmed) {\n        return 'Loading...';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify='center'>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color='textPrimary' gutterBottom>Infected</Typography>\n                        <Typography variant='h6'>\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' />\n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Total Number of Active Cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                        <Typography variant='h6'>\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=',' />\n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Total Number of Recoveries</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                        <Typography variant='h6'>\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=',' />\n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Total Number of Deaths</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards\n","import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    try {\n        let modifiedUrl = url\n        if (country && country !== 'global') {\n            modifiedUrl += '/countries/' + country;\n            console.log('modified url:', modifiedUrl);\n        }\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(modifiedUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    }\n    catch (error) {\n        alert('Error in fetching data');\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData;\n    } catch (error) {\n        alert('Error in fetching data');\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountryData = async (country) => {\n    try {\n        let modifiedUrl = url\n        modifiedUrl += '/countries/' + country + '/confirmed';\n        console.log('modified url:', modifiedUrl);\n        const { data } = await axios.get(modifiedUrl);\n        const modifiedData = data.map((stateData) => ({\n            state: stateData.provinceState,\n            confirmed: stateData.confirmed,\n            recovered: stateData.recovered,\n            deaths: stateData.deaths,\n        }));\n        modifiedData.sort((a, b) => b.confirmed - a.confirmed);\n        return modifiedData.slice(0, 5);\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Bar, Line } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country, countryData }) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const getDailyData = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        getDailyData();\n    }, []);\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n                height={250}\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [{\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        borderColor: 'rgb(79,129,189)',\n                        backgroundColor: 'rgba(79,129,189,0.5)',\n                        fill: true,\n                    }, {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgb(192,80,77)',\n                        backgroundColor: 'rgba(192,80,77,0.8)',\n                        fill: true,\n                    }],\n                }}\n                options={{\n                    scales: {\n                        xAxes: [{\n                            stacked: false,\n                            ticks: {\n                                // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n                                // callback: function (val, index) {\n                                //     // Hide the label of every 2nd dataset\n                                //     return index % 2 === 0 ? getLabelForValue(val) : '';\n                                // },\n                                min: 5,\n                                maxTicksLimit: 6\n                            }\n                        }],\n                        yAxes: [{\n                            stacked: false,\n                            ticks: {\n                                beginAtZero: true,\n                                callback: function (label, index, labels) {\n                                    return Intl.NumberFormat().format(label);\n                                }\n                            }\n                        }]\n                    }\n                }}\n            />) : 'ERROR'\n    )\n    console.log(countryData);\n    let top5 = countryData\n    if (countryData !== null) {\n        // top5 = countryData.slice(5);     \n        console.log(top5);\n    }\n    const statesBarChart = (\n        countryData ? (<Bar\n            height={250}\n            data={{\n                labels: countryData.map((state) => state.state ? state.state : 'All states'),\n                datasets: [{\n                    data: countryData.map(({ confirmed }) => confirmed),\n                    label: 'Confirmed',\n                    backgroundColor: 'rgb(79,129,189)'\n\n                }, {\n                    data: countryData.map(({ recovered }) => recovered),\n                    label: 'Recovered',\n                    backgroundColor: 'rgb(155,187,89)'\n\n                }, {\n                    data: countryData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    backgroundColor: 'rgb(192,80,77)'\n                }]\n            }}\n            options={{\n                legend: {\n                    labels: {\n                        boxWidth: 20,\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        stacked: false\n                    }],\n                    yAxes: [{\n                        stacked: false,\n                        ticks: {\n                            beginAtZero: true,\n                            callback: function (label, index, labels) {\n                                return Intl.NumberFormat().format(label); //use 'hi' for indian number format\n                            }\n                        }\n                    }]\n                },\n                // maintainAspectRatio: false\n            }}\n        />) : null\n    );\n\n\n    const barChart = (\n        confirmed ? (<Bar\n            height={250}\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    data: [confirmed.value, recovered.value, deaths.value],\n                    label: 'People',\n                    backgroundColor: [\n                        'rgb(79,129,189)',\n                        'rgb(155,187,89)',\n                        'rgb(192,80,77)'\n                    ]\n                }]\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` },\n                scales: {\n                    xAxes: [{\n                        stacked: false\n                    }],\n                    yAxes: [{\n                        stacked: false,\n                        ticks: {\n                            beginAtZero: true,\n                            callback: function (label, index, labels) {\n                                return Intl.NumberFormat().format(label); //use 'hi' for indian number format\n                            }\n                        }\n                    }]\n                }\n            }}\n\n        />) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country && country !== 'global' ? barChart : lineChart}\n            {country && country !== 'global' && countryData[0] && countryData[0].state ? statesBarChart : null}\n        </div>\n    )\n}\n\nexport default Chart\n","import React, { useEffect, useState } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchCountriesAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchCountriesAPI();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)} >\n                <option value=\"global\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker\n","export default __webpack_public_path__ + \"static/media/covid.a2427bb2.jpg\";","import { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData, fetchCountryData } from './api';\nimport { useState, useEffect } from 'react';\nimport coronaImage from './images/covid.jpg';\n\nfunction App() {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const getData = async () => {\n      const data = await fetchData();\n      setData(data);\n    }\n    getData();\n  }, []);\n\n  const [country, setCountry] = useState('');\n\n  const [countryData, setCountryData] = useState([]);\n\n  const handleCountryChange = async (country) => {\n    console.log(country);\n    const data = await fetchData(country);\n    const countryData = await fetchCountryData(country);\n    setData(data);\n    setCountry(country);\n    setCountryData(countryData);\n    // const fetchedData = await fetchData(country)\n  }\n\n  return (\n    <div className={styles.container}>\n      <img src={coronaImage} className={styles.logo} alt='logo' />\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} country={country} countryData={countryData} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"logo\":\"App_logo__1ItuU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}