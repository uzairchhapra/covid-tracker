{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid.jpg","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","modifiedUrl","axios","get","alert","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","fetchCountryData","stateData","state","provinceState","sort","b","slice","Chart","countryData","useState","setDailyData","useEffect","getDailyData","lineChart","length","height","labels","datasets","label","borderColor","fill","backgroundColor","options","scales","xAxes","stacked","yAxes","ticks","beginAtZero","callback","index","Intl","NumberFormat","format","top5","statesBarChart","legend","boxWidth","barChart","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","setData","getData","setCountry","setCountryData","src","coronaImage","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2151eb91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1VOym\",\"card\":\"Cards_card__1NBDA\",\"infected\":\"Cards_infected__10Zq5\",\"recovered\":\"Cards_recovered__cH0jK\",\"deaths\":\"Cards_deaths__tZsfR\"};","import React from 'react'\r\nimport styles from './Cards.module.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    console.log(confirmed);\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textPrimary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Total Number of Active Cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Total Number of Recoveries</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Total Number of Deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    try {\r\n        let modifiedUrl = url\r\n        if (country && country !== 'global') {\r\n            modifiedUrl += '/countries/' + country;\r\n            console.log('modified url:', modifiedUrl);\r\n        }\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(modifiedUrl);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    }\r\n    catch (error) {\r\n        alert('Error in fetching data');\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        alert('Error in fetching data');\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountryData = async (country) => {\r\n    try {\r\n        let modifiedUrl = url\r\n        modifiedUrl += '/countries/' + country + '/confirmed';\r\n        console.log('modified url:', modifiedUrl);\r\n        const { data } = await axios.get(modifiedUrl);\r\n        const modifiedData = data.map((stateData) => ({\r\n            state: stateData.provinceState,\r\n            confirmed: stateData.confirmed,\r\n            recovered: stateData.recovered,\r\n            deaths: stateData.deaths,\r\n        }));\r\n        modifiedData.sort((a, b) => b.confirmed - a.confirmed);\r\n        return modifiedData.slice(0, 5);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country, countryData }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const getDailyData = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        getDailyData();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n                height={250}\r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill: true,\r\n                    }],\r\n                }}\r\n                options={{\r\n                    scales: {\r\n                        xAxes: [{\r\n                            stacked: false\r\n                        }],\r\n                        yAxes: [{\r\n                            stacked: false,\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                callback: function (label, index, labels) {\r\n                                    return Intl.NumberFormat().format(label);\r\n                                }\r\n                            }\r\n                        }]\r\n                    }\r\n                }}\r\n            />) : 'ERROR'\r\n    )\r\n    console.log(countryData);\r\n    let top5 = countryData\r\n    if (countryData !== null) {\r\n        // top5 = countryData.slice(5);     \r\n        console.log(top5);\r\n    }\r\n    const statesBarChart = (\r\n        countryData ? (<Bar\r\n            height={250}\r\n            data={{\r\n                labels: countryData.map((state) => state.state ? state.state : 'All states'),\r\n                datasets: [{\r\n                    data: countryData.map(({ confirmed }) => confirmed),\r\n                    label: 'Confirmed',\r\n                    backgroundColor: 'rgba(0, 0, 255, 0.5)'\r\n\r\n                }, {\r\n                    data: countryData.map(({ recovered }) => recovered),\r\n                    label: 'Recovered',\r\n                    backgroundColor: 'rgba(0, 255, 0, 0.5)'\r\n\r\n                }, {\r\n                    data: countryData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)'\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {\r\n                    labels: {\r\n                        boxWidth: 20,\r\n                    }\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        stacked: false\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: false,\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                            callback: function (label, index, labels) {\r\n                                return Intl.NumberFormat().format(label); //use 'hi' for indian number format\r\n                            }\r\n                        }\r\n                    }]\r\n                },\r\n                // maintainAspectRatio: false\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n\r\n    const barChart = (\r\n        confirmed ? (<Bar\r\n            height={250}\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    data: [confirmed.value, recovered.value, deaths.value],\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0, 0, 255, 0.5)',\r\n                        'rgba(0, 255, 0, 0.5)',\r\n                        'rgba(255, 0, 0, 0.5)'\r\n                    ]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` },\r\n                scales: {\r\n                    xAxes: [{\r\n                        stacked: false\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: false,\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                            callback: function (label, index, labels) {\r\n                                return Intl.NumberFormat().format(label); //use 'hi' for indian number format\r\n                            }\r\n                        }\r\n                    }]\r\n                }\r\n            }}\r\n\r\n        />) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country && country !== 'global' ? barChart : lineChart}\r\n            {country && country !== 'global' && countryData[0] && countryData[0].state ? statesBarChart : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchCountriesAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)} >\r\n                <option value=\"global\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","export default __webpack_public_path__ + \"static/media/covid.a2427bb2.jpg\";","import { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData, fetchCountryData } from './api';\nimport { useState, useEffect } from 'react';\nimport coronaImage from './images/covid.jpg';\n\nfunction App() {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const getData = async () => {\n      const data = await fetchData();\n      setData(data);\n    }\n    getData();\n  }, []);\n\n  const [country, setCountry] = useState('');\n\n  const [countryData, setCountryData] = useState([]);\n\n  const handleCountryChange = async (country) => {\n    console.log(country);\n    const data = await fetchData(country);\n    const countryData = await fetchCountryData(country);\n    setData(data);\n    setCountry(country);\n    setCountryData(countryData);\n    // const fetchedData = await fetchData(country)\n  }\n\n  return (\n    <div className={styles.container}>\n      <img src={coronaImage} className={styles.logo} alt='logo' />\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} country={country} countryData={countryData} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__6e8Ly\",\"logo\":\"App_logo__3i_Wm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Fz7NB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1ku3z\"};"],"sourceRoot":""}